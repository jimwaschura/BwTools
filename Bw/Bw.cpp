// Bw.cpp : This file contains the 'main' function. Program execution begins and ends there.
//


/*
 * bw.c
 *
 *  Created on: Aug 23 2016
 *      Author: Audrey Waschura
 */


//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#include <stdio.h>
#include <stdlib.h>
#include "../BwToolsLib/BwDevice.h"
#include "../BwToolsLib/UtilTrim.h"


static const int RESPONSE_BUF_SIZE = 64 * 1024;
static void process(BwDevice * Device, int queryFlag, char * buf, int buflen );

int main(int argc, char* argv[])
{
#ifdef _DEBUG
	printf("main(), Entered\n");
#endif

	char* IPAddress = NULL;
	int Port = 923;
	char* TransmissionString = NULL;
	char* InputFileName = NULL;
	bool helpFlag = false;
	bool verboseFlag = false;
	bool Fast = false;
	bool Query = false;

	/* initialize variables for settings from getenv values */
	/*  BW_PORT, BW_IP */

	size_t len;
	char* envString;

	if (_dupenv_s(&envString, &len, "BW_PORT") == 0)
	{
		int n;
		if (envString != NULL && len>0 && sscanf_s(envString, "%d", &n) == 1)
			Port = n;
		free(envString);
	}

	if (_dupenv_s(&envString, &len, "BW_IP") == 0)
	{
		if (envString != NULL)
			IPAddress = envString;
	}


	/* parse command line options */

	while (*(++argv))
	{
		if (!strcmp(*argv, "-h"))		helpFlag = 1;
		else if (!strcmp(*argv, "-help"))	helpFlag = 1;
		else if (!strcmp(*argv, "-v"))		verboseFlag = 1;
		else if (!strcmp(*argv, "-port"))	Port = atoi(*(++argv));
		else if (!strcmp(*argv, "-p"))		Port = atoi(*(++argv));
		else if (!strcmp(*argv, "-ip"))	IPAddress = *(++argv);
		else if (!strcmp(*argv, "-i"))		IPAddress = *(++argv);
		else if (!strcmp(*argv, "-file"))	InputFileName = *(++argv);
		else if (!strcmp(*argv, "-f"))		InputFileName = *(++argv);
		else if (!strcmp(*argv, "-nocheck"))	Fast = true;
		else if (!strcmp(*argv, "-n"))		Fast = true;
		else if (!strcmp(*argv, "-query"))	Query = true;
		else if (!strcmp(*argv, "-q"))		Query = true;
		else TransmissionString = *argv;
	}

	if (IPAddress == NULL)
		IPAddress = (char*) "localhost";

	/* if  -h show help and exit */

	if (helpFlag)
	{
		printf("Usage:  bw [options]\n");
		printf("Options: -h ............ show this message\n");
		printf("         -v ............ show verbose messages\n");
		printf("         -port <N> ..... (or -p) port number, default is 923\n");
		printf("         -ip <addr> .... (or -i) ip address, default is localhost\n");
		printf("         -file <file> .. (or -f) specify file to read commands from\n");
		printf("         -nocheck....... (or -n) turn on fast mode to skip error checking on server\n");
		printf("         2.0\n");

		exit(0);
	}

	/* if verbose, show current values */

	if (verboseFlag)
	{
		printf("port.....%d\n", Port);
		printf("nocheck..%d\n", Fast);
		printf("query....%d\n", Query);
		printf("ip.......%s\n", IPAddress);
		printf("file.....%s\n", (TransmissionString == NULL ? (InputFileName == NULL ? "stdin" : InputFileName) : TransmissionString));
	}

	/* open socket */

#ifdef _DEBUG
	printf("main(), Opening socket..\n");
#endif

	BwDevice Device;

	Device.set_fast_mode( Fast);

	/* connect to host */

#ifdef _DEBUG
	printf("main(), Connecting to host..\n");
#endif

	Device.connect( IPAddress, Port);

	try
	{

		/* have transmission string from command line */
		/* have file descriptor from -f argument */
		/* use stdin, and read multiple lines until EOF  */

#ifdef _DEBUG
		printf("main(), Setting up input source..\n");
#endif
		FILE* fd = NULL;
		if (InputFileName != NULL)
		{ 
			if( fopen_s(&fd, InputFileName, "r") != 0 )
			{
				fprintf(stderr, "Error opening input file: %s\n", InputFileName );
				return 1;
			}
		}

		if (fd == NULL && TransmissionString != NULL)
		{
#ifdef _DEBUG
			printf("main(), Calling process on Transmission String\n");
#endif
			process(&Device, Query, TransmissionString, (int)strlen(TransmissionString));
		}
		else
		{
			if (fd == NULL)
				fd = stdin;

#ifdef _DEBUG
			printf("main(), Calling process on file descriptor..\n");
#endif
			char buffer[4096];
			while (fgets(buffer, 4096, fd) != NULL )
				process(&Device, Query, buffer, (int)strlen(buffer));

			if (fd != stdin)
				fclose(fd);
		}

#ifdef _DEBUG
		printf("main(), Closing device\n");
#endif

		Device.disconnect();

#ifdef _DEBUG
		printf("main(), Exiting normally\n");
#endif
	}
	catch (const char* msg)
	{
		fprintf(stderr,"main(), Exiting with error: %s\n", msg);
		Device.disconnect();
	}
	catch (...)
	{
		fprintf(stderr,"main(), Exiting with unknown error\n");
		Device.disconnect();
	}
	return 0;
}

	static char responseBuffer[RESPONSE_BUF_SIZE];

static void process(BwDevice * Device, int queryFlag, char* buf, int buflen)
{
	trim_string(buf);

#ifdef _DEBUG
	printf("process(), Entered with %s\n", buf );
#endif

	if (queryFlag || (buflen > 0 && buf[buflen - 1] == '?'))
	{
		/* Query Response */
#ifdef _DEBUG
		printf("process(), Query Response\n");
#endif

		Device->query_response(	responseBuffer, RESPONSE_BUF_SIZE, "%s\n", buf );

		fprintf(stdout, "%s\n", responseBuffer);
	}
	else if (buflen > 0)
	{
		/* Send Command */
#ifdef _DEBUG
		printf("process(), Send Command\n");
#endif
		Device->send_command( "%s\n", buf);
	}
	else
	{
		fprintf(stderr, "No command entered.\n");
	}
}

/* EOF */
