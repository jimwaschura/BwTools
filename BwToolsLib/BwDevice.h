//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#pragma once

#include "UtilSocket.h"

class BwDevice
{
public:
	BwDevice();
	virtual ~BwDevice();

	bool getFastMode() { return m_FastMode; }
	void setFastMode(bool newValue) { m_FastMode = newValue; }

	bool getConnected() { return m_Connected; }

	const char* getIPAddress() { return m_IPAddress; }
	int getPort() { return m_Port; }

	void Connect( const char* ipAddress, int port);
	void Disconnect();
	void SendCommand( const char* fmt, ...);
	char * QueryResponse( char* buffer, int buffersize, const char* fmt, ...);
	char * getStatus( char* buffer, int buffersize);
	void ClearStatus();

protected:

	UtilSocket* getSocket() { return m_Socket; }

private:

	const char* m_IPAddress;
	int m_Port;
	bool m_Connected;
	bool m_FastMode;
	UtilSocket* m_Socket;
};

